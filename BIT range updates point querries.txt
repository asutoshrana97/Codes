import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;

class EASY
{
        static long MOD = (long) (Math.pow(10,9)+7);
        static long[] BIT;
	public static void main (String[] args) throws java.lang.Exception
	{
		// your code goes here
		InputReader in=new InputReader(System.in);		
                PrintWriter out=new PrintWriter(System.out);
                //BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
                
                int N = in.readInt();
                int M = in.readInt();
                long C = in.readLong();
                /*long[] A = new long[N];
                for(int i=0;i<N;i++){
                    A[i]=C;
                }*/
                BIT = new long[N+1];
                range_update(1,N,C);
                
                while(M-->0){
                    char[] P = in.readString().toCharArray();
                    
                    if(P[0]=='Q'){
                        int Q = in.readInt();
                        out.println(query(Q));
                    }
                    else{
                        int u = in.readInt();
                        int v = in.readInt();
                        long k = in.readLong();
                        range_update(u,v,k);
                    }
                    
                }
                out.flush();
                out.close();
        }      
        
        
        static long query(int b){

            long sum = 0;
            for (; b>0; b -= LSOne(b))
                sum += BIT[b];
            return sum;
        }

        // Point update: Adds v to the value at position k in the array
        static void update(int k, long v) {
            
            for (; k < BIT.length; k += LSOne(k)){
                //System.out.println("update");
                BIT[k] += v;
            }
        }

        // Range update: Adds v to each element in [i...j] in the array
        static void range_update(int i, int j, long v)	{

            update(i, v);
            //System.out.println("range update");
            update(j + 1, -v);
        }
        
        static int LSOne(int S){
            return ( S & (-S));
        }
 
}


class InputReader{
	private InputStream stream;
	private byte[] buf = new byte[1024];
	private int curChar;
	private int numChars;
	private SpaceCharFilter filter;
	
	public InputReader(InputStream stream){this.stream = stream;}
	public int read(){
		if (numChars==-1) throw new InputMismatchException();
		if (curChar >= numChars){
			curChar = 0;
			try {numChars = stream.read(buf);}
			catch (IOException e){throw new InputMismatchException();}
			if(numChars <= 0) return -1;
		}
		return buf[curChar++];
	}
 
	public int readInt(){
		int c = read();
		while(isSpaceChar(c)) c = read();
		int sgn = 1;
		if (c == '-') {sgn = -1;c = read();}
		int res = 0;
		do {
			if(c<'0'||c>'9') throw new InputMismatchException();
			res *= 10;
			res += c - '0';
			c = read();
		}
		while (!isSpaceChar(c)); return res * sgn;
	}
	
	public long readLong() {
		int c = read();
		while (isSpaceChar(c))
			c = read();
		int sgn = 1;
		if (c == '-') {
			sgn = -1;
			c = read();
        }
		long res = 0;
		do {
			if (c < '0' || c > '9')
				throw new InputMismatchException();
			res *= 10;
			res += c - '0';
			c = read();
        }
		while (!isSpaceChar(c));
            return res * sgn;
    }
	
	public double readDouble() {
        int c = read();
        while (isSpaceChar(c))
            c = read();
        int sgn = 1;
		if (c == '-') {
			sgn = -1;
			c = read();
        }
		double res = 0;
		while (!isSpaceChar(c) && c != '.') {
			if (c == 'e' || c == 'E')
				return res * Math.pow(10, readInt());
			if (c < '0' || c > '9')
				throw new InputMismatchException();
			res *= 10;
			res += c - '0';
			c = read();
        }
		if (c == '.') {
			c = read();
			double m = 1;
			while (!isSpaceChar(c)) {
				if (c == 'e' || c == 'E')
					return res * Math.pow(10, readInt());
				if (c < '0' || c > '9')
					throw new InputMismatchException();
				m /= 10;
				res += (c - '0') * m;
				c = read();
            }
        }
		return res * sgn;
    }
	
	public String readString() {
		int c = read();
		while (isSpaceChar(c))
			c = read();
		StringBuilder res = new StringBuilder();
		do {
			res.appendCodePoint(c);
			c = read();
		} while (!isSpaceChar(c));
		return res.toString();
	}
 
	public boolean isSpaceChar(int c) {
		if (filter != null)
			return filter.isSpaceChar(c);
		return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
		}
 
	public String next() {
		return readString();
	}
	
	public interface SpaceCharFilter {
		public boolean isSpaceChar(int ch);
	}
	
}
